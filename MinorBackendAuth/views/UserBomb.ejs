<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EvacSafe</title>
    <link
    href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css"
    rel="stylesheet"
  />
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
  <link
    rel="stylesheet"
    href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css"
    type="text/css"
  />
  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.js"></script>
  <link
    rel="stylesheet"
    href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.css"
    type="text/css"
  />
  <link
    href="https://fonts.googleapis.com/css?family=Roboto&display=swap"rel="stylesheet"/>
</head>
<style>
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;700;900&display=swap');

*{
  margin:0;
  padding: 0;
  box-sizing:border-box;
}
body {
  font-family: 'Montserrat', sans-serif;
  background-color: #f5f5f5;
  color: #333;
  /* font-variant: small-caps; */
}

nav{
  padding-inline: 10px;
  background:#000000 ;
}
.navbar{
  /* margin-inline: 10px; */
  display:flex;
  justify-content: space-between;
  padding-block:10px;
}
.logo{
  /* border:1px solid red; */
  display:flex;
  align-items: center;
  gap:15px;
}
.logo h1{
    /* border:1px solid red; */
    font-size: 3em;
    font-weight: 900;
    color:rgb(246, 161, 15);
}
.hover-links{
  transition-property: color;
  transition-duration: 0.3s;
  transition-timing-function: ease-out;
  text-decoration: none;
  color:white;
}
.hover-links:hover{
  color:rgb(246, 161, 15);
}
.flex{
  /* border:1px solid black; */
  display:flex;
  list-style-type:none;
  align-items:center;
  gap:40px;
}
.nav-links{
  /* border: 1px solid red; */
  display:flex;
  align-items: center;
  padding-right: 20px;
}
.signin{
    border:1px solid white;
    border-radius: 6px;
    font-weight: 700;
    color: white !important;
    padding:12px 24px;
    transition: 0.3s ease-out;
}
.signin:hover{
    background-color: white; 
    color: black !important;
    border:1px solid white;
}


header {
  /* border:1px solid red; */
  padding:8px;
  height:60vh;
  color:white;
  margin-bottom: 20px;
  box-shadow: 0 2px 6px rgb(8, 6, 6, 0.3);
  background: linear-gradient(to top right, rgba(0, 0, 0, 0.699) 30%, rgba(255, 255, 255, 0.428));
  display:flex;
  flex-direction: column;
  justify-content: center;
}

header::before {
  /* border:2px solid blue; */
  content:"";
  position: absolute;
  left: 0;
  width: 100%;
  height: 60vh;
  /* background:url("https://d1b3667xvzs6rz.cloudfront.net/2023/10/F9O1JOPb0AANrkS-860x484.jpeg"); */
  background:url("bombing.jpeg");
  background-repeat:no-repeat;
  background-size:100% 100%;
  z-index:-1;
}

h1 {
  /* border: 1px solid red; */
  padding-left: 10px;
  font-size: 4.5rem;
  font-variant: small-caps;
  letter-spacing: 1.5px;
}

p {
  /* border: 1px solid red; */
  padding-left: 10px;
  border-radius: 20px;
  width:50%;
  font-size: 1.4rem;
  font-variant: small-caps;
  letter-spacing: 1px;
}

.hero_section{
  /* border: 1px solid #000;
  padding-inline: 0px; */
  margin-top:-10px;
  display:flex;
}

.container {
  background: linear-gradient(to right, rgba(3, 3, 3, 0.555), #ffffff75);
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  width: 30%;
  margin: 20px;
  display:flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.container > h1{
    font-size:2rem;
    text-transform: capitalize;
    text-align: center;
}
.container > p{
    font-variant: none;
    text-align: center;
    font-size:1.2rem;
    margin-block:20px;
}

.container button{
  margin-top:10px;
  padding:15px 25px;
  border:none;
  box-shadow: 2px 2px 5px black;
  font-variant: small-caps;
  font-weight: 500;
  font-size: 1.1rem;
  background:#000;
  color:white;
  border-radius: 25px;
  transition: color, background, box-shadow, 0.5s;
}
.container button:hover{
  color:#000;
  background:#ece9e9;
}

#map{
  border: 1px solid #ddd;
  border-radius: 8px;
  margin: 20px 20px 0px 0px;
  width: 70%;
  padding: 20px 0px 20px 0px;
  height: 100vh;
  visibility: hidden;
}

#showNearbyMarkers {
        position: absolute;
        top: 90vh;
        right: 10px;
        padding: 10px 20px;
        background-color: #4caf50; /* Green background */
        border: none; /* No border */
        color: white; /* White text */
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        transition-duration: 0.4s; /* Transition effect */
        cursor: pointer;
        border-radius: 4px;
        z-index: 1;
      }

      #showNearbyMarkers:hover {
        background-color: #45a049; /* Darker green when you hover over it */
      }

      /* Style for the Mapbox Directions control */
      .mapboxgl-ctrl-directions {
        background-color: rgba(
          255,
          255,
          255,
          0.9
        ); /* Semi-transparent white background */
        border-radius: 0px; /* No rounded corners */
        box-shadow: 0 1px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow for a 3D effect */
        font-family: "Roboto", sans-serif; /* Google Maps uses the Roboto font */
        color: #333; /* Dark grey text color */
      }

      /* #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
        z-index: 0;
      }
    */

      #showNearMarkers {
        position: absolute;
        top: 82vh;
        right: 10px;
        padding: 10px 20px;
        background-color: rgb(64, 64, 144); /* Green background */
        border: none; /* No border */
        color: white; /* White text */
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        transition-duration: 0.4s; /* Transition effect */
        cursor: pointer;
        border-radius: 4px;
        z-index: 1;
      }

      #showNearMarkers:hover {
        background-color: #0056a9;
      }

</style>

<body>
    <nav>
        <div class="navbar">
            <div class="logo">
                <h1>EvacSafe</h1>
            </div>
            <div class="nav-links">
                <ul class="flex">
                    <li><a href="#" class="hover-links">Notifications</a></li>
                    <li><a href="#map" class="hover-links">Maps</a></li>
                    <li><a href="#" class="hover-links signin">Navigate Safe Zone</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <header>
      <h1>Evac Safe</h1>
      <p>EvacSafe helps in navigating war victims to safe zones through real-time data. </p>
    </header>
    
    <section class="hero_section">

      <div class="container">
        <h1>Find Safety During War</h1>
        <p>Navigate to safe zones and watch live feeds, all powered by advanced AI technologies.</p>
        <button class="btn">Navigate Safe Zone</button>
      </div>

      <div id="map">
        <button id="showNearbyMarkers">Show Nearby Safezone</button>
        <button id="showNearMarkers">Show Nearest Safezone</button>
        <div id="map1"></div>

      </div>

    </section>
</body>

<script>
  const navigate = document.getElementsByClassName("btn")[0];
  const mapp = document.getElementById("map");
  navigate.addEventListener("click", function() {
    mapp.style.visibility = "visible";
  })

</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>

    <script>
      mapboxgl.accessToken =
        "pk.eyJ1IjoiYWRlc2gxMjI2IiwiYSI6ImNsb2s2YzRqcDI0N3Mya3BsOXUzdGQ2YXkifQ.rRL-cGdC7uw-6IMQczNjrA";
      const map = new mapboxgl.Map({
        container: "map",
        style: "mapbox://styles/mapbox/dark-v11",
        center: [77.23, 28.61],
        zoom: 9,
      });

      const Places = [
        {
          name: "DLF Promenade",
          LngLat: [77.1565, 28.5431],
          capacity: 0,
          capacityLimit: 4,
          csvFile: "DLF_Promenade.csv",
        },
        {
          name: "DLF Mall of India",
          LngLat: [77.3206, 28.5672],
          capacity: 0,
          capacityLimit: 4,
          csvFile: "DLF.csv",
        },
        {
          name: "City Square Mall",
          LngLat: [77.1216, 28.6519],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "City.csv",
        },

        {
          name: "V3S Mall",
          LngLat: [77.2918, 28.6365],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "V3S.csv",
        },
        {
          name: "Moments Mall",
          LngLat: [77.1457121, 28.6570766],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Moments.csv",
        },

        {
          name: "Metro Walk Mall",
          LngLat: [77.1105641, 28.7249925],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Metro.csv",
        },

        {
          name: "Gurmeet's Banquets",
          LngLat: [77.2998785, 28.6574362],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Gurmeet.csv",
        },

        {
          name: "Unity One Mall",
          LngLat: [77.2966171, 28.6607103],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Unity.csv",
        },

        {
          name: "Dlf Emporio",
          LngLat: [77.1523499, 28.5433672],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Dlf_Emporio.csv",

        },

        {
          name: "Crown Interiorz Mall",
          LngLat: [77.3043178, 28.4695543],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Crown.csv",

        },

       
        {
          name: "Rajiv Chowk Metro Station",
          LngLat: [ 77.2197,28.6328 ],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Rajiv.csv",

        },

        {
          name: "Kashmere Gate Metro Station",
          LngLat: [77.2291,28.667],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Kashmere.csv",

        },

        {
          name: "Chandni Chowk Metro Station",
          LngLat: [ 77.2303,28.6579],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Chandni.csv",

        },


        {
          name: "Central Secretariat Metro Station",
          LngLat: [ 77.2119,28.6143],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Central.csv",

        },


        {
          name: "Crown Interiorz Mall",
          LngLat: [77.3043178, 28.4695543],
          capacity: 0,
          capacityLimit: 5,
          csvFile: "Crown.csv",

        },

        {
          name:"Hauz Khas Metro Station",
          LngLat:[77.2061,28.5431],
          capacity:0,
          capacityLimit:5,
          csvFile:"Hauz.csv"

        },

        {
          name:"Jor Bagh Metro Station",
          LngLat:[77.2167,28.5866],
          capacity:0,
          capacityLimit:5,
          csvFile:"Jor.csv"

        }
,

        {
          name:"Khan Market Metro Station",
          LngLat:[77.2274, 28.6009 ],
          capacity:0,
          capacityLimit:5,
          csvFile:"Khan.csv"

        },

        {
          name:"Lajpat Nagar Metro Station",
          LngLat:[77.2360,28.5686],
          capacity:0,
          capacityLimit:5,
          csvFile:"Lajput.csv"

        },

        
      ];

      Places.forEach((place) => {
        Papa.parse(place.csvFile, {
          download: true,
          header: true,
          skipEmptyLines: true,
          complete: function (results) {
            const row = results.data[0];
            // console.log(row);
            // console.log(place.name);
            if (row && row.cap) {
              place.capacity = parseInt(row.cap, 10);
              console.log(place.name);
              console.log(place.capacity);
              // Update the capacity
            }
            // if(row&& row.CapacityLimit){
            //   place.capacityLimit = parseInt(row.CapacityLimit, 10);
            //   console.log(place.capacityLimit);
            // }
          },
        });
      });

      //
      function calculateDistance(coord1, coord2) {
        const R = 6371e3; // metres
        const x = (coord1[1] * Math.PI) / 180; // φ, λ in radians
        const y = (coord2[1] * Math.PI) / 180;
        const z = ((coord2[1] - coord1[1]) * Math.PI) / 180;
        const z1 = ((coord2[0] - coord1[0]) * Math.PI) / 180;

        const a =
          Math.sin(z / 2) * Math.sin(z / 2) +
          Math.cos(x) * Math.cos(y) * Math.sin(z1 / 2) * Math.sin(z1 / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c; // in metres
      }
      // Define a function to show nearby markers within a 10km range
      function showNearbyMarkers() {
        if ("geolocation" in navigator) {
          navigator.geolocation.getCurrentPosition(function (position) {
            const userLocation = [
              position.coords.longitude,
              position.coords.latitude,
            ];

            // Clear existing markers
            document
              .querySelectorAll(".marker")
              .forEach((markerElement) => markerElement.remove());

            // Filter and display markers within a 10km range
            Places.forEach(({ name, LngLat, capacity, capacityLimit }) => {
              console.log("Capacity: " + capacity);
              console.log("Capacity Limit: " + capacityLimit);

              if (LngLat && capacity <= capacityLimit) {
                // Check the capacity here
                const distance = calculateDistance(userLocation, LngLat);

                if (distance <= 50000) {
                  const popup = new mapboxgl.Popup({ offset: 25 }).setText(
                    `${name} (CapacityLimit: ${capacityLimit})` // Include the capacity in the popup text
                  );
                  const marker = new mapboxgl.Marker({ scale: 1 })
                    .setLngLat(LngLat)
                    .setPopup(popup)
                    .addTo(map)
                    .getElement();
                  marker.classList.add("marker");
                  console.log("Marker Added: " + name);
                }

                map.flyTo({
                  zoom: 11, // Adjust the zoom level as needed
                  essential: true, // This ensures a smooth animation
                });
                console.log(
                  "Distance to " + name + ": " + distance + " meters"
                );
              }
            });
          });
        } else {
          alert("Geolocation is not available in your browser.");
        }
      }

      document
        .getElementById("showNearbyMarkers")
        .addEventListener("click", showNearbyMarkers);

      // Your existing map controls here

      function showNearestMarker() {
        if ("geolocation" in navigator) {
          navigator.geolocation.getCurrentPosition(function (position) {
            const userLocation = [
              position.coords.longitude,
              position.coords.latitude,
            ];

            let nearestMarker = null;
            let nearestDistance = Infinity;

            // Find the nearest marker
            Places.forEach(({ name, LngLat, capacity, capacityLimit }) => {
              console.log("Capacity: " + capacity);
              console.log("Capacity Limit: " + capacityLimit);

              if (LngLat && capacity <= capacityLimit) {
                const distance = calculateDistance(userLocation, LngLat);

                if (distance < nearestDistance) {
                  nearestDistance = distance;
                  nearestMarker = { name, LngLat, capacityLimit };
                }
              }
            });

            // Clear existing markers
            document
              .querySelectorAll(".marker")
              .forEach((markerElement) => markerElement.remove());

            // Display the nearest marker
            if (nearestMarker) {
              const { name, LngLat, capacityLimit } = nearestMarker;

              const popup = new mapboxgl.Popup({ offset: 25 }).setText(
                `${name} (CapacityLimit: ${capacityLimit})`
              ); // Include the capacity in the popup text
              const marker = new mapboxgl.Marker({ scale: 1 })
                .setLngLat(LngLat)
                .setPopup(popup)
                .addTo(map)
                .getElement();
              marker.classList.add("marker");
              console.log("Nearest Marker Added: " + name);

              map.flyTo({
                center: LngLat,
                zoom: 12, // Adjust the zoom level as needed
                essential: true, // This ensures a smooth animation
              });

              directions.setOrigin([
                position.coords.longitude,
                position.coords.latitude,
              ]);
              directions.setDestination(LngLat);
            }
          });
        } else {
          alert("Geolocation is not available in your browser.");
        }
      }

      document
        .getElementById("showNearMarkers")
        .addEventListener("click", showNearestMarker);

      map.on("load", function () {
        map.addControl(
          new MapboxDirections({
            accessToken: mapboxgl.accessToken,
          }),
          "bottom-left"
        );
      });

      map.addControl(
        new mapboxgl.GeolocateControl({
          positionOptions: {
            enableHighAccuracy: true,
          },
          trackUserLocation: true,
          showUserHeading: true,
        })
      );
    </script>

</html>